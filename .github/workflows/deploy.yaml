name: Deploy to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: plantasia
  EKS_CLUSTER: prod-plantasia
  EKS_ROLE_ARN: arn:aws:iam::476114158430:role/eks-cluster-access-role

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.EKS_ROLE_ARN }}
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Configure kubectl
      run: |
        # Create .kube directory
        mkdir -p ~/.kube
        
        # Get cluster info
        CLUSTER_NAME="${{ env.EKS_CLUSTER }}"
        CLUSTER_ENDPOINT=$(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.endpoint" --output text)
        CERTIFICATE_DATA=$(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.certificateAuthority.data" --output text)
        
        # Create kubeconfig
        cat > ~/.kube/config << EOF
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            certificate-authority-data: ${CERTIFICATE_DATA}
            server: ${CLUSTER_ENDPOINT}
          name: ${CLUSTER_NAME}
        contexts:
        - context:
            cluster: ${CLUSTER_NAME}
            user: aws
          name: ${CLUSTER_NAME}
        current-context: ${CLUSTER_NAME}
        preferences: {}
        users:
        - name: aws
          user:
            exec:
              apiVersion: client.authentication.k8s.io/v1beta1
              command: aws
              args:
                - --region
                - ${{ env.AWS_REGION }}
                - eks
                - get-token
                - --cluster-name
                - ${CLUSTER_NAME}
              env:
                - name: AWS_ACCESS_KEY_ID
                  value: ${{ env.AWS_ACCESS_KEY_ID }}
                - name: AWS_SECRET_ACCESS_KEY
                  value: ${{ env.AWS_SECRET_ACCESS_KEY }}
                - name: AWS_SESSION_TOKEN
                  value: ${{ env.AWS_SESSION_TOKEN }}
        EOF
        
        # Test connection
        kubectl get nodes

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        kubectl apply --validate=false -f kubernetes/plantasia.yaml