name: Deploy to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: plantasia
  EKS_CLUSTER: prod-plantasia
  EKS_ROLE_ARN: arn:aws:iam::476114158430:role/eks-cluster-access-role

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.EKS_ROLE_ARN }}
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: v${{ github.sha }}
      run: |
        # Build with platform specified
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Configure kubectl
      run: |
        # Assume the role explicitly
        CREDENTIALS=$(aws sts assume-role \
          --role-arn ${{ env.EKS_ROLE_ARN }} \
          --role-session-name GithubActionsSession \
          --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
          --output text)
        
        # Set the assumed role credentials
        export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | cut -f1 -d' ')
        export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | cut -f2 -d' ')
        export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | cut -f3 -d' ')
        
        # Update kubeconfig with assumed role
        aws eks update-kubeconfig \
          --name ${{ env.EKS_CLUSTER }} \
          --region ${{ env.AWS_REGION }}
        
        # Test connection
        kubectl get nodes

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: v${{ github.sha }}
      run: |
        # Update deployment image
        kubectl set image deployment/plantasia plantasia=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Monitor rollout
        kubectl rollout status deployment/plantasia